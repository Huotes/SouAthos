#!/usr/bin/env python3
"""
Snake Game - Ponto de entrada principal
Arquitetura modular seguindo princ√≠pios DRY, KISS e POO

Estrutura do projeto:
- config/: Configura√ß√µes centralizadas
- core/: Engine e sistemas principais  
- entities/: Objetos do jogo (Snake, Food)
- graphics/: Sistema de renderiza√ß√£o e UI
- utils/: Utilit√°rios e tipos compartilhados

Autor: Snake Game Development Team
Vers√£o: 1.0.0
Python: 3.13+
"""

import sys
import os
from pathlib import Path
from typing import Optional

# Adiciona o diret√≥rio raiz ao path para imports
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def check_python_version() -> bool:
    """
    Verifica se a vers√£o do Python √© compat√≠vel
    
    Returns:
        True se vers√£o √© compat√≠vel, False caso contr√°rio
    """
    if sys.version_info < (3, 9):
        print(f"‚ùå Python {sys.version_info.major}.{sys.version_info.minor} n√£o suportado")
        print("üí° Requer Python 3.9 ou superior")
        print("üì• Baixe em: https://www.python.org/downloads/")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} detectado")
    return True

def check_dependencies() -> bool:
    """
    Verifica se todas as depend√™ncias est√£o instaladas
    
    Returns:
        True se tudo ok, False se falta algo
    """
    missing_deps = []
    
    # Verifica pygame
    try:
        import pygame
        print(f"‚úÖ Pygame {pygame.version.ver} detectado")
    except ImportError:
        missing_deps.append("pygame")
    
    # Verifica typing_extensions (para Python < 3.10)
    if sys.version_info < (3, 10):
        try:
            import typing_extensions
            print("‚úÖ typing_extensions detectado")
        except ImportError:
            missing_deps.append("typing_extensions")
    
    if missing_deps:
        print("‚ùå Depend√™ncias n√£o encontradas:")
        for dep in missing_deps:
            print(f"   ‚Ä¢ {dep}")
        print("\nüí° Instale com:")
        print(f"   pip install {' '.join(missing_deps)}")
        print("   ou")
        print("   pip install -r requirements.txt")
        return False
    
    return True

def check_project_structure() -> bool:
    """
    Verifica se a estrutura do projeto est√° correta
    
    Returns:
        True se estrutura ok, False caso contr√°rio
    """
    required_dirs = ['config', 'core', 'entities', 'graphics', 'utils']
    required_files = [
        'config/settings.py',
        'core/__init__.py',
        'core/game_engine.py', 
        'core/events.py',
        'entities/__init__.py',
        'entities/game_object.py',
        'entities/snake.py',
        'entities/food.py',
        'graphics/__init__.py',
        'graphics/renderer.py',
        'graphics/ui.py',
        'utils/__init__.py',
        'utils/enums.py',
        'utils/types.py'
    ]
    
    missing_items = []
    
    # Verifica diret√≥rios
    for dir_name in required_dirs:
        dir_path = project_root / dir_name
        if not dir_path.exists() or not dir_path.is_dir():
            missing_items.append(f"Diret√≥rio: {dir_name}/")
    
    # Verifica arquivos
    for file_path in required_files:
        full_path = project_root / file_path
        if not full_path.exists() or not full_path.is_file():
            missing_items.append(f"Arquivo: {file_path}")
    
    if missing_items:
        print("‚ùå Estrutura do projeto incompleta:")
        for item in missing_items:
            print(f"   ‚Ä¢ {item}")
        print("\nüí° Certifique-se de ter todos os m√≥dulos na estrutura correta")
        return False
    
    print("‚úÖ Estrutura do projeto verificada")
    return True

def import_game_modules() -> Optional[object]:
    """
    Importa os m√≥dulos do jogo com tratamento de erros
    
    Returns:
        Classe GameEngine se sucesso, None se erro
    """
    try:
        from core.game_engine import GameEngine
        print("‚úÖ M√≥dulos do jogo importados com sucesso")
        return GameEngine
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos do jogo: {e}")
        print("üîß Verifique se todos os arquivos est√£o no local correto")
        return None
    
    except Exception as e:
        print(f"üí• Erro inesperado durante import: {e}")
        return None

def print_welcome_banner() -> None:
    """Imprime o banner de boas-vindas"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üêç SNAKE GAME üêç               ‚ïë
‚ïë                                          ‚ïë
‚ïë        Arquitetura Modular POO           ‚ïë
‚ïë       Python 3.13 + Pygame             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def print_project_info() -> None:
    """Imprime informa√ß√µes sobre a estrutura do projeto"""
    print("\nüìã ARQUITETURA MODULAR:")
    print("‚îå‚îÄ‚îÄ main.py              # Ponto de entrada")
    print("‚îú‚îÄ‚îÄ config/")
    print("‚îÇ   ‚îî‚îÄ‚îÄ settings.py      # Configura√ß√µes centralizadas")
    print("‚îú‚îÄ‚îÄ core/")
    print("‚îÇ   ‚îú‚îÄ‚îÄ game_engine.py   # Engine principal do jogo")
    print("‚îÇ   ‚îî‚îÄ‚îÄ events.py        # Sistema de eventos")
    print("‚îú‚îÄ‚îÄ entities/")
    print("‚îÇ   ‚îú‚îÄ‚îÄ game_object.py   # Classe base abstrata")
    print("‚îÇ   ‚îú‚îÄ‚îÄ snake.py         # L√≥gica da cobra")
    print("‚îÇ   ‚îî‚îÄ‚îÄ food.py          # L√≥gica da comida")
    print("‚îú‚îÄ‚îÄ graphics/")
    print("‚îÇ   ‚îú‚îÄ‚îÄ renderer.py      # Sistema de renderiza√ß√£o")
    print("‚îÇ   ‚îî‚îÄ‚îÄ ui.py           # Interface do usu√°rio")
    print("‚îî‚îÄ‚îÄ utils/")
    print("    ‚îú‚îÄ‚îÄ enums.py        # Enumera√ß√µes do jogo")
    print("    ‚îî‚îÄ‚îÄ types.py        # Type hints personalizados")
    
    print("\nüéØ PRINC√çPIOS APLICADOS:")
    print("‚Ä¢ DRY: Configura√ß√µes centralizadas, sem duplica√ß√£o de c√≥digo")
    print("‚Ä¢ KISS: M√≥dulos simples com responsabilidades bem definidas") 
    print("‚Ä¢ POO: Heran√ßa, encapsulamento, polimorfismo e abstra√ß√£o")
    print("‚Ä¢ SOLID: Responsabilidade √∫nica e alta extensibilidade")

def print_game_controls() -> None:
    """Imprime os controles do jogo"""
    print("\nüéÆ CONTROLES DO JOGO:")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ üéØ Movimento: ‚Üë‚Üì‚Üê‚Üí ou WASD          ‚îÇ")
    print("‚îÇ ‚è∏Ô∏è  Pausar:   SPACE                  ‚îÇ") 
    print("‚îÇ üîÑ Reiniciar: R (ap√≥s game over)    ‚îÇ")
    print("‚îÇ ‚ùå Sair:     Q ou fechar janela     ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

def main() -> int:
    """
    Fun√ß√£o principal do jogo
    
    Returns:
        C√≥digo de sa√≠da (0 = sucesso, 1 = erro)
    """
    # Banner de boas-vindas
    print_welcome_banner()
    
    print("üîç Verificando sistema...")
    
    # 1. Verificar vers√£o do Python
    if not check_python_version():
        return 1
    
    # 2. Verificar depend√™ncias
    if not check_dependencies():
        return 1
    
    # 3. Verificar estrutura do projeto
    if not check_project_structure():
        return 1
    
    # 4. Importar m√≥dulos do jogo
    GameEngine = import_game_modules()
    if GameEngine is None:
        return 1
    
    # Informa√ß√µes do projeto
    print_project_info()
    print_game_controls()
    
    print("\n" + "="*50)
    print("üöÄ INICIANDO SNAKE GAME...")
    print("="*50)
    
    try:
        # Inicializa e executa o jogo
        engine = GameEngine()
        engine.run()
        
        print("\n‚úÖ Jogo finalizado com sucesso!")
        return 0
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Jogo interrompido pelo usu√°rio (Ctrl+C)")
        return 0
        
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico durante execu√ß√£o:")
        print(f"   {type(e).__name__}: {e}")
        print("\nüêõ Poss√≠veis causas:")
        print("   ‚Ä¢ Arquivo de configura√ß√£o corrompido")
        print("   ‚Ä¢ Problema com pygame/display")
        print("   ‚Ä¢ Recurso do sistema indispon√≠vel")
        print("   ‚Ä¢ Bug no c√≥digo do jogo")
        
        # Em modo debug, mostra traceback completo
        if '--debug' in sys.argv or '-d' in sys.argv:
            import traceback
            print("\nüìã TRACEBACK COMPLETO:")
            traceback.print_exc()
        
        return 1

def show_help() -> None:
    """Mostra ajuda sobre como usar o programa"""
    help_text = """
üêç Snake Game - Ajuda

USO:
    python main.py [op√ß√µes]

OP√á√ïES:
    -h, --help     Mostra esta ajuda
    -d, --debug    Ativa modo debug (mostra traceback completo)
    -v, --version  Mostra vers√£o do jogo
    --check        Apenas verifica depend√™ncias (n√£o executa)

EXEMPLOS:
    python main.py              # Executa o jogo normalmente
    python main.py --debug      # Executa com debug ativado
    python main.py --check      # Verifica se tudo est√° ok

REQUISITOS:
    ‚Ä¢ Python 3.9+
    ‚Ä¢ pygame 2.5.0+
    ‚Ä¢ typing_extensions (para Python < 3.10)

ESTRUTURA:
    Certifique-se de que todos os m√≥dulos estejam organizados
    na estrutura de diret√≥rios correta conforme documenta√ß√£o.
    
Para mais informa√ß√µes, consulte o README.md
"""
    print(help_text)

def show_version() -> None:
    """Mostra informa√ß√µes de vers√£o"""
    print("üêç Snake Game")
    print("Vers√£o: 1.0.0")
    print("Arquitetura: Modular POO")
    print(f"Python: {sys.version}")
    
    try:
        import pygame
        print(f"Pygame: {pygame.version.ver}")
    except ImportError:
        print("Pygame: N√£o instalado")

if __name__ == "__main__":
    # Processa argumentos da linha de comando
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['-h', '--help']:
            show_help()
            sys.exit(0)
        
        elif arg in ['-v', '--version']:
            show_version()
            sys.exit(0)
        
        elif arg == '--check':
            print("üîç Verificando sistema...")
            success = (check_python_version() and 
                      check_dependencies() and 
                      check_project_structure())
            
            if success:
                print("‚úÖ Tudo pronto para executar o jogo!")
                sys.exit(0)
            else:
                print("‚ùå Sistema n√£o est√° pronto")
                sys.exit(1)
    
    # Executa o jogo
    exit_code = main()
    sys.exit(exit_code)
